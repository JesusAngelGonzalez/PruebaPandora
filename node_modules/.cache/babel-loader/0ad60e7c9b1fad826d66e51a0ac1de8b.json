{"ast":null,"code":"import superagentPromise from 'superagent-promise';\nimport _superagent from 'superagent';\nconst superagent = superagentPromise(_superagent, global.Promise);\nconst API_ROOT = 'https://pandorapp.herokuapp.com/api'; //const encode = encodeURIComponent;\n\nconst responseBody = res => {\n  let response = res.body;\n  response.statusType = res.statusType;\n  response.status = res.status;\n  return response;\n};\n\nlet token = null;\n\nconst tokenPlugin = req => {\n  req.set('accept', 'application/json').ok(res => true);\n\n  if (token) {\n    req.set('authorization', `${token}`);\n  }\n};\n\nconst requests = {\n  del: url => superagent.del(`${API_ROOT}${url}`).use(tokenPlugin).then(responseBody),\n  get: url => superagent.get(`${API_ROOT}${url}`).use(tokenPlugin).then(responseBody),\n  put: (url, body) => superagent.put(`${API_ROOT}${url}`, body).use(tokenPlugin).then(responseBody),\n  post: (url, body) => superagent.post(`${API_ROOT}${url}`, body).use(tokenPlugin).then(responseBody)\n};\nconst Usuario = {\n  registro: (mail, password) => requests.post(`/usuarios/registro`, {\n    mail: mail,\n    masterPassword: password\n  }),\n  login: (email, password) => requests.post('/usuarios/login', {\n    mail: email,\n    masterPassword: password\n  }),\n  logout: () => null\n};\nconst ContactaAgent = {\n  contactar: (mail_, body_) => requests.post(`/mensaje`, {\n    mail: mail_,\n    body: body_\n  })\n};\nexport { Usuario, ContactaAgent };\nexport const setToken = _token => {\n  token = _token;\n};","map":{"version":3,"sources":["/home/jesus/PS3/PruebaPandora/src/agent.js"],"names":["superagentPromise","_superagent","superagent","global","Promise","API_ROOT","responseBody","res","response","body","statusType","status","token","tokenPlugin","req","set","ok","requests","del","url","use","then","get","put","post","Usuario","registro","mail","password","masterPassword","login","email","logout","ContactaAgent","contactar","mail_","body_","setToken","_token"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,oBAA9B;AACA,OAAOC,WAAP,MAAwB,YAAxB;AAEA,MAAMC,UAAU,GAAGF,iBAAiB,CAACC,WAAD,EAAcE,MAAM,CAACC,OAArB,CAApC;AAEA,MAAMC,QAAQ,GAAG,qCAAjB,C,CAEA;;AACA,MAAMC,YAAY,GAAGC,GAAG,IAAI;AAC1B,MAAIC,QAAQ,GAAGD,GAAG,CAACE,IAAnB;AACAD,EAAAA,QAAQ,CAACE,UAAT,GAAsBH,GAAG,CAACG,UAA1B;AACAF,EAAAA,QAAQ,CAACG,MAAT,GAAkBJ,GAAG,CAACI,MAAtB;AACA,SAAOH,QAAP;AACD,CALD;;AAOA,IAAII,KAAK,GAAG,IAAZ;;AACA,MAAMC,WAAW,GAAGC,GAAG,IAAI;AACzBA,EAAAA,GAAG,CAACC,GAAJ,CAAQ,QAAR,EAAkB,kBAAlB,EAAsCC,EAAtC,CAAyCT,GAAG,IAAI,IAAhD;;AACA,MAAIK,KAAJ,EAAW;AACTE,IAAAA,GAAG,CAACC,GAAJ,CAAQ,eAAR,EAA0B,GAAEH,KAAM,EAAlC;AACD;AACF,CALD;;AAOA,MAAMK,QAAQ,GAAG;AACfC,EAAAA,GAAG,EAAEC,GAAG,IACNjB,UAAU,CAACgB,GAAX,CAAgB,GAAEb,QAAS,GAAEc,GAAI,EAAjC,EAAoCC,GAApC,CAAwCP,WAAxC,EAAqDQ,IAArD,CAA0Df,YAA1D,CAFa;AAGfgB,EAAAA,GAAG,EAAEH,GAAG,IACNjB,UAAU,CAACoB,GAAX,CAAgB,GAAEjB,QAAS,GAAEc,GAAI,EAAjC,EAAoCC,GAApC,CAAwCP,WAAxC,EAAqDQ,IAArD,CAA0Df,YAA1D,CAJa;AAKfiB,EAAAA,GAAG,EAAE,CAACJ,GAAD,EAAMV,IAAN,KACHP,UAAU,CAACqB,GAAX,CAAgB,GAAElB,QAAS,GAAEc,GAAI,EAAjC,EAAoCV,IAApC,EAA0CW,GAA1C,CAA8CP,WAA9C,EAA2DQ,IAA3D,CAAgEf,YAAhE,CANa;AAOfkB,EAAAA,IAAI,EAAE,CAACL,GAAD,EAAMV,IAAN,KACJP,UAAU,CAACsB,IAAX,CAAiB,GAAEnB,QAAS,GAAEc,GAAI,EAAlC,EAAqCV,IAArC,EAA2CW,GAA3C,CAA+CP,WAA/C,EAA4DQ,IAA5D,CAAiEf,YAAjE;AARa,CAAjB;AAWA,MAAMmB,OAAO,GAAG;AACdC,EAAAA,QAAQ,EAAE,CAACC,IAAD,EAAOC,QAAP,KACRX,QAAQ,CAACO,IAAT,CAAe,oBAAf,EAAoC;AAAEG,IAAAA,IAAI,EAAEA,IAAR;AAAcE,IAAAA,cAAc,EAAED;AAA9B,GAApC,CAFY;AAGdE,EAAAA,KAAK,EAAE,CAACC,KAAD,EAAQH,QAAR,KACLX,QAAQ,CAACO,IAAT,CAAc,iBAAd,EAAiC;AAAEG,IAAAA,IAAI,EAAEI,KAAR;AAAeF,IAAAA,cAAc,EAAED;AAA/B,GAAjC,CAJY;AAKdI,EAAAA,MAAM,EAAE,MACN;AANY,CAAhB;AASA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,SAAS,EAAE,CAACC,KAAD,EAAQC,KAAR,KACTnB,QAAQ,CAACO,IAAT,CAAe,UAAf,EAA0B;AAAEG,IAAAA,IAAI,EAAEQ,KAAR;AAAe1B,IAAAA,IAAI,EAAE2B;AAArB,GAA1B;AAFkB,CAAtB;AAKA,SACEX,OADF,EAEEQ,aAFF;AAIA,OAAO,MAAMI,QAAQ,GAAIC,MAAD,IAAY;AAAE1B,EAAAA,KAAK,GAAG0B,MAAR;AAAiB,CAAhD","sourcesContent":["import superagentPromise from 'superagent-promise';\nimport _superagent from 'superagent';\n\nconst superagent = superagentPromise(_superagent, global.Promise);\n\nconst API_ROOT = 'https://pandorapp.herokuapp.com/api';\n\n//const encode = encodeURIComponent;\nconst responseBody = res => {\n  let response = res.body;\n  response.statusType = res.statusType;\n  response.status = res.status;\n  return response;\n};\n\nlet token = null;\nconst tokenPlugin = req => {\n  req.set('accept', 'application/json').ok(res => true);\n  if (token) {\n    req.set('authorization', `${token}`);\n  }\n}\n\nconst requests = {\n  del: url =>\n    superagent.del(`${API_ROOT}${url}`).use(tokenPlugin).then(responseBody),\n  get: url =>\n    superagent.get(`${API_ROOT}${url}`).use(tokenPlugin).then(responseBody),\n  put: (url, body) =>\n    superagent.put(`${API_ROOT}${url}`, body).use(tokenPlugin).then(responseBody),\n  post: (url, body) =>\n    superagent.post(`${API_ROOT}${url}`, body).use(tokenPlugin).then(responseBody)\n};\n\nconst Usuario = {\n  registro: (mail, password) =>\n    requests.post(`/usuarios/registro`, { mail: mail, masterPassword: password }),\n  login: (email, password) =>\n    requests.post('/usuarios/login', { mail: email, masterPassword: password }),\n  logout: () =>\n    null\n};\n\nconst ContactaAgent = {\n  contactar: (mail_, body_) =>\n    requests.post(`/mensaje`, { mail: mail_, body: body_ })\n}\n\nexport {\n  Usuario,\n  ContactaAgent\n};\nexport const setToken = (_token) => { token = _token; }\n"]},"metadata":{},"sourceType":"module"}